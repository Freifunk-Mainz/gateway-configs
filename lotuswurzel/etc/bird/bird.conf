define wi_addr_ic = 10.207.0.56;  # lotuswurzel = wiesbaden1
define wi_addr_wi = 10.56.0.23;
define mz_addr_mz = 10.37.0.23;

router id 10.207.0.56;

table icvpn; # BGP Peerings 4 wi (ICVPN) and local wimz nets
table icvpn_mz; # BGP Peerings 4 mz (ICVPN) - copy of icvpn
table icvpn_gen; # just a copy of icvpn

# ROA
roa table roa_icvpn {
  include "ebgp_roa_v4.inc";
}

function is_freifunk_dn42() {
    return net ~ [
        10.0.0.0/8{16,24},
        172.22.0.0/15{20,28},
        172.31.0.0/16+
    ];
}

function is_mwu_self_nets() {
    return net ~ [
        10.56.0.0/16+,
        10.37.0.0/16+
    ];
}

function is_wi_self_net() {
    return net ~ [
        10.56.0.0/16+
    ];
}

function is_mz_self_net() {
    return net ~ [
        10.37.0.0/16+
    ];
}

filter ebgp_import_filter {
    if is_mwu_self_nets() then reject;
    if is_freifunk_dn42() then accept;
    if roa_check(roa_icvpn) = ROA_VALID then {
        accept;
    } else {
        print "ROA check failed for ", net, " ASN ", bgp_path.last;
    }
    reject;
}

# necessary to inform bird about devices
protocol device {
    scan time 30;
};

# learn about directly connected community subnets
protocol direct mwu_subnets {
    interface 10.37.0.0/16;
    interface 10.56.0.0/16;
    table icvpn;
};

protocol kernel kernel_mwu {
    scan time 30;
    import none;
    export filter {
        if is_mwu_self_nets() then
            reject;
        krt_prefsrc = wi_addr_ic;
        accept;
    };
    table icvpn;
    kernel table 23;
};

# templates for iBGP
template bgp bgp_ibgp_wi {
    local wi_addr_wi as 65036;
    table icvpn;
    import keep filtered on;
    import all;  # EXPERIMENT !!!!!
    export where source = RTS_BGP;
    direct;
    gateway direct;
};

# templates for eBGP
template bgp ebgp_ic {
    local wi_addr_ic as 65036;
    table icvpn;
    import keep filtered on;
    import filter ebgp_import_filter;
    export filter {
        if is_wi_self_net() then {  # own nets
            bgp_path.prepend(65036);
            accept;
        }
        if is_mz_self_net() then {  # foreign mz nets
            bgp_path.delete(65036);
            bgp_path.prepend(65037);
            bgp_path.prepend(65036);
            accept;
        }
        if source = RTS_BGP then {
            accept;
        }
        reject;
    };
    direct;
};

# P E E R I N G S
# iBGP 

protocol bgp wiesbaden2 from bgp_ibgp_wi { # hinterschinken
    neighbor 10.56.0.5 as 65036;
};

# P E E R I N G S
# eBGP (siehe IPv6)

# following the pattern, a load of 'em:
# protocol bgp <PeerName> from ebgp_ic {
#    neighbor <PeerAddrV4> as <PeerAS>;
#};
include "ebgp_peers_v4.inc";

