define wi_addr_ic     = fec0::a:cf:0:38;        # lotuswurzel = wiesbaden1
define wi_addr_wi     = fd56:b4dc:4b1e::a38:17;
define mz_addr_mz     = fd37:b4dc:4b1e::a25:17;
# prefixes repeated in functions -> see there
define wi_prefix      = fd56:b4dc:4b1e::/48;
define mz_prefix      = fd37:b4dc:4b1e::/48;

router id 10.207.0.56;   # traditionally v4-addr as router id

# routing tables
table icvpn;    # BGP Peerings 4 wi (ICVPN) and local wimz nets
table icvpn_mz; # BGP Peerings 4 mz (ICVPN) - copy of ic
table icvpn_gen;

# ROA
roa table roa_icvpn {
  include "ebgp_roa_v6.inc";
}

# filter to check ulas
function is_ula() {
    return net ~ [
        fc00::/7{48,64}
    ];
}

function is_mwu_self_nets() {
    return net ~ [
        fd56:b4dc:4b1e::/48+,
        fd37:b4dc:4b1e::/48+
    ];
}

function is_wi_self_net() {
    return net ~ [
        fd56:b4dc:4b1e::/48+
    ];
}

function is_mz_self_net() {
    return net ~ [
        fd37:b4dc:4b1e::/48+
    ];
}

filter ebgp_import_filter {
    if is_mwu_self_nets() then reject;
    if is_ula() then accept;
    if roa_check(roa_icvpn) = ROA_VALID then {
        accept;
    } else {
        print "ROA check failed for ", net, " ASN ", bgp_path.last;
    }
    reject;
}

# necessary to inform bird about devices
protocol device {
    scan time 30;
};
# learn about directly connected community subnets
protocol direct mwu_subnets {
    interface fd56:b4dc:4b1e::/48;
    interface fd37:b4dc:4b1e::/48;
    table icvpn;
};

protocol kernel kernel_mwu {
    scan time 30;
    import none;
    export filter {
        if is_mwu_self_nets() then
            reject;
        krt_prefsrc = wi_addr_ic;
        accept;
    };
    table icvpn;
    kernel table 23;
};

# template for iBGP
template bgp ibgp_wi {
    local wi_addr_wi as 65036;
    table icvpn;
    import all;  # EXPERIMENT !!!!!
    export where source = RTS_BGP;
    direct;
    gateway direct;
};

# template for eBGP
template bgp ebgp_ic {
    local wi_addr_ic as 65036;
    table icvpn;
    import filter ebgp_import_filter;
    export filter {
#        if is_wi_self_net() then {  # own nets
#            bgp_path.prepend(65036);
#            accept;
#        }
        if is_mz_self_net() then {  # foreign mz nets
            bgp_path.delete(65036);
            bgp_path.prepend(65037);
            bgp_path.prepend(65036);
            accept;
        }
        if source = RTS_BGP then {
            accept;
        }
        reject;
    };
    direct;
};

# P E E R I N G S
# #### iBGP #####

protocol bgp wiesbaden2 from ibgp_wi { # hinterschinken
    neighbor fd56:b4dc:4b1e::a38:5 as 65036;
};

# P E E R I N G S
# #### eBGP #####

# following the pattern, a load of 'em:
# protocol bgp <PeerName> from ebgp_ic {
#    neighbor <PeerAddrV6> as <PeerAS>;
#};
include "ebgp_peers_v6.inc";
