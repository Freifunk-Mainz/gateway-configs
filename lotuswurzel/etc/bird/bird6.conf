timeformat protocol iso long;

# local addresses
define wi_addr_ic     		= fec0::a:cf:0:38; # lotuswurzel = wiesbaden1
define wi_addr_wi     		= fd56:b4dc:4b1e::a38:17; # wi-mesh-ip
define mz_addr_mz     		= fd37:b4dc:4b1e::a25:17; # mz-mesh-ip
define ffrl_addr_tun_ber	= 2a03:2260:0:91::2; # internal ffrl-gre-tunnel-ip berlin
define ffrl_addr_tun_dus	= 2a03:2260:0:92::2; # internal ffrl-gre-tunnel-ip duesseldorf

# prefixes repeated in functions -> see there
define wi_prefix      		= fd56:b4dc:4b1e::/48; # wi ula-prefix
define mz_prefix      		= fd37:b4dc:4b1e::/48; # mz ula-prefix
define wi_ffrl_prefix 		= 2a03:2260:11b::/48; # wi public ffrl prefix
define mz_ffrl_prefix 		= 2a03:2260:11a::/48; # mz public ffrl prefix

# AS
define mz_as = 65037; # as of mainz
define wi_as = 65036; # as of wiesbaden

# on which addresses bird6 should listen on
# maybe multiple listen statements don't work?
#listen bgp address wi_addr_ic;
#listen bgp address wi_addr_wi;
#listen bgp address ffrl_addr_tun_ber;
#listen bgp address ffrl_addr_tun_dus;

router id 10.207.0.56;   # traditionally v4-addr as router id

# routing tables
table icvpn;    # BGP Peerings 4 wi (ICVPN) and local wimz nets
table icvpn_mz; # BGP Peerings 4 mz (ICVPN) - copy of ic
table ffrl; # BGP Peerings FFRL

# ROA
roa table roa_icvpn {
  include "ebgp_roa_v6.inc";
}

# functions
function is_default() {
    return net ~ [
        ::/0
    ];
}

function is_ula() {
    return net ~ [
        fc00::/7{48,64}
    ];
}

function is_mwu_self_nets() {
    return net ~ [
        fd56:b4dc:4b1e::/48+,
        fd37:b4dc:4b1e::/48+
    ];
}

function is_ffrl_public_nets() {
    return net ~ [
        2a03:2260:11a::/48{48,56},
        2a03:2260:11b::/48{48,56}
    ];
}

function is_ffrl_tunnel_nets() {
    return net ~ [
        2a03:2260:0:91::/64,
        2a03:2260:0:92::/64
    ];
}

function is_wi_self_net() {
    return net ~ [
        fd56:b4dc:4b1e::/48+
    ];
}

function is_mz_self_net() {
    return net ~ [
        fd37:b4dc:4b1e::/48+
    ];
}

# filters
filter ebgp_icvpn_import_filter {
    if is_mwu_self_nets() then reject;
    if is_ula() then accept;
    if roa_check(roa_icvpn) = ROA_VALID then {
        accept;
    } else {
        print "ROA check failed for ", net, " ASN ", bgp_path.last;
    }
    reject;
}

filter ebgp_ffrl_import_filter {
    if is_default() then accept;
    reject;
}

filter ebgp_ffrl_export_filter {
    if is_ffrl_public_nets() then accept;
    reject;
}

# protocols
# necessary to inform bird about devices
protocol device {
    scan time 30;
};

# learn about directly connected community subnets
protocol direct mwu_subnets {
    table icvpn;
    interface "mzBR";
    interface "wiBR";
    import where is_mwu_self_nets();
};

# learn tunnel addresses for ffrl
protocol direct {
    table ffrl;
    interface "tun-ffrl*";
    import where is_ffrl_tunnel_nets();
}

# static routes
protocol static ffrl_public_routes {
    table ffrl;
    route 2a03:2260:11a::/48 reject;
    route 2a03:2260:11b::/48 reject;
}

# kernel protocols
protocol kernel kernel_mwu {
    scan time 30;
    import none;
    export filter {
        if is_mwu_self_nets() then
            reject;
        krt_prefsrc = wi_addr_ic;
        accept;
    };
    table icvpn;
    kernel table 23;
};

protocol kernel kernel_ffrlexit {
    persist;
    scan time 30;
    import none;
    export filter {
        if is_default() then accept;
        reject;
    };
    device routes;
    table ffrl;
    kernel table 83;
}

# template for iBGP
template bgp ibgp_wi {
    local wi_addr_wi as 65036;
    table icvpn;
    import all;  # EXPERIMENT !!!!!
    export where source = RTS_BGP;
    direct;
    gateway direct;
};

# template for eBGP ICVPN
template bgp ebgp_ic {
    local wi_addr_ic as 65036;
    table icvpn;
    import filter ebgp_icvpn_import_filter;
    export filter {
        if is_wi_self_net() then {  # own nets
#            bgp_path.prepend(65036);
            accept;
        }
        if is_mz_self_net() then {  # foreign mz nets
            bgp_path.delete(65036);
            bgp_path.prepend(65037);
            bgp_path.prepend(65036);
            accept;
        }
        if source = RTS_BGP then {
            accept;
        }
        reject;
    };
    direct;
};

# template for eBGP FFRL
template bgp ffrl_uplink {
    table ffrl;
    local as mz_as;
    import keep filtered;
    import filter ebgp_ffrl_import_filter;
    export filter ebgp_ffrl_export_filter;
    next hop self;
    multihop 64;
};



# P E E R I N G S
# #### iBGP #####

protocol bgp wiesbaden2 from ibgp_wi { # hinterschinken
    neighbor fd56:b4dc:4b1e::a38:d0 as 65036;
};

# P E E R I N G S
# #### eBGP #####

# FFRL Berlin
#protocol bgp ffrlber from ffrl_uplink {
#    source address 2a03:2260:0:91::2;
#    neighbor 2a03:2260:0:91::1 as 201701;
#    default bgp_local_pref 200;
#}

# FFRL Duesseldorf
#protocol bgp ffrldus from ffrl_uplink {
#    source address 2a03:2260:0:92::2;
#    neighbor 2a03:2260:0:92::1 as 201701;
#    default bgp_local_pref 100;
#}

# following the pattern, a load of 'em:
# protocol bgp <PeerName> from ebgp_ic {
#    neighbor <PeerAddrV6> as <PeerAS>;
#};
include "ebgp_peers_v6.inc";
