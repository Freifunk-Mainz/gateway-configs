define wi_addr_ic = 10.207.1.56;  # hinterschinken = wiesbaden2
define wi_addr_wi = 10.56.0.5;
define mz_addr_mz = 10.37.0.5;
router id 10.207.1.56;

table ic; # BGP Peerings 4 wi (ICVPN) and local wimz nets
table ic_mz; # BGP Peerings 4 mz (ICVPN) - copy of ic
table ic_gen;

function is_freifunk_dn42() {
    return (net ~ [
        10.0.0.0/8{12,32},
        172.22.0.0/15+,
        172.31.0.0/16
        ]);
}

function is_bad_route() {
    return (net ~ [
        10.32.0.0/12,
        10.56.0.0/13
        ]);
}

function is_wimz_self_nets() {
    return (net ~ [10.56.0.0/16+,
                   10.37.0.0/16+]);
}

function is_wi_self_net() {
    return (net ~ [10.56.0.0/16+]);
}

function is_mz_self_net() {
    return (net ~ [10.37.0.0/16+]);
}

# necessary to inform bird about devices
protocol device {
    scan time 30;
};
# learn about directly connected community subnets
protocol direct wi_subnets {
    interface 10.37.0.0/16;
    interface 10.56.0.0/16;
    table ic;
};

protocol kernel kernel_wi {
    scan time 30;
    import none;
    export filter {
        if is_wimz_self_nets() then
            reject;
        krt_prefsrc = wi_addr_wi;
        accept;
    };
    table ic;
    kernel table 56;
};

protocol pipe wi2mz {
    import all;
    export none;
    table ic_mz;
    peer table ic;
};
 
protocol kernel kernel_mz {
    scan time 30;
    import none;
    export filter {
        if is_wimz_self_nets() then
            reject;
        krt_prefsrc = mz_addr_mz;
        accept;
    };
    table ic_mz;
    kernel table 37;
};

protocol pipe wi2gen {
    import all;
    export none;
    table ic_gen;
    peer table ic;
};

protocol kernel kernel_gen {
    scan time 30;
    import none;
    export filter {
        if is_wimz_self_nets() then
            reject;
        krt_prefsrc = wi_addr_ic;
        accept;
    };
    table ic_gen;
    kernel table 42;
};

# templates for iBGP
template bgp bgp_ibgp_wi {
    local wi_addr_wi as 65036;
    table ic;
    import all;  # EXPERIMENT !!!!!
    export where source = RTS_BGP;
    direct;
    gateway direct;
};

# templates for eBGP
template bgp ebgp_ic {
    local wi_addr_ic as 65036;
    table ic;
    import where (is_freifunk_dn42() && !is_wimz_self_nets() && !is_bad_route());
    export filter {
        if is_wi_self_net() then {  # own nets
#            bgp_path.delete(65036);
#            bgp_path.prepend(65036);
            bgp_path.prepend(65036);
            accept;
        }
        if is_mz_self_net() then {  # foreign mz nets
            bgp_path.delete(65036);
            bgp_path.prepend(65037);
            bgp_path.prepend(65036);
            accept;
        }
        if source = RTS_BGP then {
            accept;
        }
        reject;
    };
    direct;
};

# P E E R I N G S
# iBGP 

protocol bgp wiesbaden1 from bgp_ibgp_wi { # lotuswurzel
    neighbor 10.56.0.23 as 65036;
};

# P E E R I N G S
# eBGP (siehe IPv6)

# following the pattern, a load of 'em:
# protocol bgp <PeerName> from ebgp_ic {
#    neighbor <PeerAddrV4> as <PeerAS>;
#};
include "ebgp_peers_v4.inc";
