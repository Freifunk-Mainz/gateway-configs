define wi_addr_ic     = fec0::a:cf:1:38;        # hinterschinken = wiesbaden2
define wi_addr_wi     = fd56:b4dc:4b1e::a38:5;
define mz_addr_mz     = fd37:b4dc:4b1e::a25:5;
# prefixes repeated in functions -> see there
define wi_prefix      = fd56:b4dc:4b1e::/48;
define mz_prefix      = fd37:b4dc:4b1e::/48;

router id 10.207.1.56;   # traditionally v4-addr as router id

# routing tables
table ic;     # BGP Peerings 4 wi (ICVPN) and local wimz nets
table ic_mz;  # BGP Peerings 4 mz (ICVPN) - copy of ic
table ic_gen; # BGP Peerings 4 mz (ICVPN) - copy of ic

# ROA
roa table roa_icvpn {
  include "ebgp_roa_v6.inc";
}

# filter to check ulas
function is_ula() {
    return (net ~ [ fc00::/7{48,64} ]);
}

function is_wimz_self_nets() {
    return (net ~ [fd56:b4dc:4b1e::/48+,
                   fd37:b4dc:4b1e::/48+]);
}

function is_wi_self_net() {
    return (net ~ [fd56:b4dc:4b1e::/48+]);
}

function is_mz_self_net() {
    return (net ~ [fd37:b4dc:4b1e::/48+]);
}

filter ebgp_import_filter {
    if is_wimz_self_nets() then reject;
    if is_ula() then accept;
    if roa_check(roa_icvpn) = ROA_VALID then {
        accept;
    } else {
        print "ROA check failed for ", net, " ASN ", bgp_path.last;
    }
    reject;
}

# necessary to inform bird about devices
protocol device {
    scan time 30;
};
# learn about directly connected community subnets
protocol direct wimz_subnets {
    interface fd56:b4dc:4b1e::/48;
    interface fd37:b4dc:4b1e::/48;
    table ic;
};

protocol kernel kernel_wi {
    scan time 30;
    import none;
    export filter {
        if is_wimz_self_nets() then
            reject;
        krt_prefsrc = wi_addr_wi;
        accept;
    };
    table ic;
    kernel table 56;
};

protocol pipe wi2mz {
    import all;
    export none;
    table ic_mz;
    peer table ic;
};

protocol kernel kernel_mz {
    scan time 30;
    import none;
    export filter {
        if is_wimz_self_nets() then
            reject;
        krt_prefsrc = mz_addr_mz;
        accept;
    };
    table ic_mz;
    kernel table 37;
};

protocol pipe wi2gen {
    import all;
    export none;
    table ic_gen;
    peer table ic;
};

protocol kernel kernel_gen {
    scan time 30;
    import none;
    export filter {
        if is_wimz_self_nets() then
            reject;
        krt_prefsrc = wi_addr_ic;
        accept;
    };
    table ic_gen;
    kernel table 42;
};

# template for iBGP
template bgp ibgp_wi {
    local wi_addr_wi as 65036;
    table ic;
    import all;  # EXPERIMENT !!!!!
    export where source = RTS_BGP;
    direct;
    gateway direct;
};

# template for eBGP
template bgp ebgp_ic {
    local wi_addr_ic as 65036;
    table ic;
#    import where (is_ula() && !is_wimz_self_nets());
    import filter ebgp_import_filter;
    export filter {
#        if is_wi_self_net() then {  # own nets
##            bgp_path.delete(65036);
##            bgp_path.prepend(65036);
#            bgp_path.prepend(65036);
#            accept;
#        }
        if is_mz_self_net() then {  # foreign mz nets
            bgp_path.delete(65036);
            bgp_path.prepend(65037);
            bgp_path.prepend(65036);
            accept;
        }
        if source = RTS_BGP then {
            accept;
        }
        reject;
    };
    direct;
};

# P E E R I N G S
# #### iBGP #####

protocol bgp wiesbaden2 from ibgp_wi { # lotuswurzel
    neighbor fd56:b4dc:4b1e::a38:17 as 65036;
};

# P E E R I N G S
# #### eBGP #####

# following the pattern, a load of 'em:
# protocol bgp <PeerName> from ebgp_ic {
#    neighbor <PeerAddrV6> as <PeerAS>;
#};
include "ebgp_peers_v6.inc";
