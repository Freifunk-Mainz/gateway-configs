timeformat protocol iso long;

# local addresses
define wi_addr_wi               = 10.56.0.29; # wi-mesh-ip
define mz_addr_mz               = 10.37.0.29; # mz-mesh-ip
define ffrl_nat_address         = 185.66.195.39; # public ffrl address for nat

# AS
define mz_as = 65037; # as of mainz
define wi_as = 65036; # as of wiesbaden

router id 10.56.0.29;

table ffrl;             # BGP Peerings FFRL

# functions
function is_default() {
    return net ~ [
        0.0.0.0/0
    ];
}

function is_ffrl_nat() {
    return net ~ [
        185.66.195.39/32
    ];
}

function is_ffrl_tunnel_nets() {
    return net ~ [
        100.64.2.234/31,
        100.64.2.236/31,
        100.64.2.238/31,
        100.64.2.240/31
    ];
}

function is_freifunk() {
    return net ~ [
        10.0.0.0/8{16,24}
    ];
}

function is_dn42() {
    return net ~ [
        172.22.0.0/15{20,28}
    ];
}

function is_chaosvpn() {
    return net ~ [
        172.31.0.0/16+
    ];
}

function is_mwu_self_nets() {
    return net ~ [
        10.56.0.0/16+,
        10.37.0.0/16+
    ];
}

function is_wi_self_net() {
    return net ~ [
        10.56.0.0/16+
    ];
}

function is_mz_self_net() {
    return net ~ [
        10.37.0.0/16+
    ];
}

# filters
filter ebgp_ffrl_import_filter {
    if is_default() then accept;
    reject;
}

filter ebgp_ffrl_export_filter {
    if is_ffrl_nat() then accept;
    reject;
}

# protocols
# necessary to inform bird about devices
protocol device {
    scan time 30;
};

protocol static ffrl_uplink_hostroute {
    table ffrl;
    route 185.66.195.39/32 reject;
}

protocol direct ffrl_tunnels {
    table ffrl;
    interface "ffrl-*";
    import where is_ffrl_tunnel_nets();
}

protocol kernel kernel_ffrl {
    scan time 30;
    import none;
    export filter {
        krt_prefsrc = ffrl_nat_address;
        accept;
    };
    table ffrl;
    kernel table ipt_ffinetexit;
};

# Templates
template bgp ffrl_uplink {
    table ffrl;
    local as mz_as;
    import keep filtered;
    import filter ebgp_ffrl_import_filter;
    export filter ebgp_ffrl_export_filter;
    next hop self;
    direct;
};

# P E E R I N G S
# #### eBGP #####

# FFRL Berlin bb-a.ak.ber
protocol bgp ffrl_ber1 from ffrl_uplink {
    source address 100.64.2.235;
    neighbor 100.64.2.234 as 201701;
};

# FFRL Berlin bb-b.ak.ber
protocol bgp ffrl_ber2 from ffrl_uplink {
    source address 100.64.2.237;
    neighbor 100.64.2.236 as 201701;
    default bgp_local_pref 200;
};

# FFRL Duesseldorf bb-ba.ix.dus
protocol bgp ffrl_dus1 from ffrl_uplink {
    source address 100.64.2.239;
    neighbor 100.64.2.238 as 201701;
};

# FFRL Duesseldorf bb-b.ix.dus
protocol bgp ffrl_dus2 from ffrl_uplink {
    source address 100.64.2.241;
    neighbor 100.64.2.240 as 201701;
};
