timeformat protocol iso long;

# local addresses
define wi_addr_wi               = fd56:b4dc:4b1e::a38:1d; # wi-mesh-ip
define mz_addr_mz               = fd37:b4dc:4b1e::a25:1d; # mz-mesh-ip

# prefixes repeated in functions -> see there
define wi_prefix                = fd56:b4dc:4b1e::/48; # wi ula-prefix
define mz_prefix                = fd37:b4dc:4b1e::/48; # mz ula-prefix
define wi_ffrl_prefix           = 2a03:2260:11b::/48; # wi public ffrl prefix
define mz_ffrl_prefix           = 2a03:2260:11a::/48; # mz public ffrl prefix

# AS
define mz_as = 65037; # as of mainz
define wi_as = 65036; # as of wiesbaden

router id 10.56.0.29;   # traditionally v4-addr as router id

# routing tables
table ffrl;     # BGP Peerings FFRL

# functions
function is_default() {
    return net ~ [
        ::/0
    ];
}

function is_ula() {
    return net ~ [
        fc00::/7{48,64}
    ];
}

function is_fnev() {
  return net ~ [ 2001:bf7::/32+ ];
}

function is_ffrl() {
  return net ~ [ 2a03:2260::/30+ ];
}

function is_mwu_self_nets() {
    return net ~ [
        fd56:b4dc:4b1e::/48+,
        fd37:b4dc:4b1e::/48+
    ];
}

function is_ffrl_public_nets() {
    return net ~ [
#        2a03:2260:11a::/48{48,56},
        2a03:2260:11b::/48{48,56}
    ];
}

function is_ffrl_tunnel_nets() {
    return net ~ [
        2a03:2260:0:17f::/64,
        2a03:2260:0:180::/64,
        2a03:2260:0:181::/64,
        2a03:2260:0:182::/64
    ];
}

function is_wi_self_net() {
    return net ~ [
        fd56:b4dc:4b1e::/48+
    ];
}

function is_mz_self_net() {
    return net ~ [
        fd37:b4dc:4b1e::/48+
    ];
}

# filters
filter ebgp_ffrl_import_filter {
    if is_default() then accept;
    reject;
}

filter ebgp_ffrl_export_filter {
    if is_ffrl_public_nets() then accept;
    reject;
}

filter ibgp_icvpn_import_filter {
    if is_wi_self_net() then reject;
    if is_ffrl_public_nets() then reject;
    if is_ffrl_tunnel_nets() then reject;
    if is_default() then reject;
    if is_ula() then accept;
    if is_fnev() then accept;
    if is_ffrl() then accept;
    reject;
}

# protocols
# necessary to inform bird about devices
protocol device {
    scan time 30;
};

# learn tunnel addresses for ffrl
protocol direct ffrl_tunnels {
    table ffrl;
    interface "ffrl-*";
    import where is_ffrl_tunnel_nets();
}

# static routes
protocol static ffrl_public_routes {
    table ffrl;
#    route 2a03:2260:11a::/48 reject;
    route 2a03:2260:11b::/48 reject;
}

protocol kernel kernel_icvpn {
    scan time 30;
    import none;
    export all;
    kernel table 23;
};

protocol kernel kernel_ffrl {
    scan time 30;
    import none;
    export filter {
        if is_default() then accept;
        reject;
    };
    table ffrl;
    kernel table ipt_ffinetexit;
}

# templates
template bgp ffrl_uplink {
    table ffrl;
    local as mz_as;
    import keep filtered;
    import filter ebgp_ffrl_import_filter;
    export filter ebgp_ffrl_export_filter;
    next hop self;
    direct;
};

# templates for iBGP
template bgp bgp_ibgp_bbgate_wi {
    local wi_addr_wi as wi_as;
    import filter ibgp_icvpn_import_filter;
    export none;
    direct;
    gateway direct;
};

# P E E R I N G S
#### iBGP ####
protocol bgp mwu_lotuswurzel from bgp_ibgp_bbgate_wi { # lotuswurzel
    neighbor fd56:b4dc:4b1e::a38:17 as wi_as;
};

#### eBGP #####

# FFRL Berlin bb-a.ak.ber
protocol bgp ffrl_ber1 from ffrl_uplink {
    source address 2a03:2260:0:17f::2;
    neighbor 2a03:2260:0:17f::1 as 201701;
}

# FFRL Berlin bb-b.ak.ber
protocol bgp ffrl_ber2 from ffrl_uplink {
    source address 2a03:2260:0:180::2;
    neighbor 2a03:2260:0:180::1 as 201701;
    default bgp_local_pref 200;
}

# FFRL Duesseldorf bb-a.ix.dus
protocol bgp ffrl_dus1 from ffrl_uplink {
    source address 2a03:2260:0:181::2;
    neighbor 2a03:2260:0:181::1 as 201701;
}

# FFRL Duesseldorf bb-b.ix.dus
protocol bgp ffrl_dus2 from ffrl_uplink {
    source address 2a03:2260:0:182::2;
    neighbor 2a03:2260:0:182::1 as 201701;
}

