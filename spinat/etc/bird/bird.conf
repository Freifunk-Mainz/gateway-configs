timeformat protocol iso long;

# local addresses
define mwu_addr_ic = 10.207.37.7; # spinat = mwu7
define mz_addr_mz = 10.37.0.7; # mz-mesh-ip
define ffrl_nat_address = 185.66.195.32; #ffrl nat address

# AS
define mwu_as = 65037; # private AS of mainz
define ffrl_as = 201701; # public AS of rheinland

router id mwu_addr_ic;

table ffrl; # BGP Peerings FFRL

# ROA
roa table roa_icvpn {
  include "ebgp_roa_v4.inc";
}

# functions
function is_default() {
    return net ~ [
        0.0.0.0/0
    ];
}

function is_freifunk() {
    return net ~ [
        10.0.0.0/8{16,24}
    ];
}

function is_dn42() {
    return net ~ [
        172.20.0.0/14{20,28}
    ];
}

function is_chaosvpn() {
    return net ~ [
        172.31.0.0/16+
    ];
}

function is_mwu_self_nets() {
    return net ~ [
        10.56.0.0/16+,
        10.37.0.0/16+
    ];
}

function is_wi_self_net() {
    return net ~ [
        10.56.0.0/16+
    ];
}

function is_mz_self_net() {
    return net ~ [
        10.37.0.0/16+
    ];
}


#FFRL Funktionen 
# Funktionen, die später aufgerufen werden
function is_ffrl_nat() {
    return net ~ [
        185.66.195.32/32
    ];
}

function is_ffrl_tunnel_nets() {
    return net ~ [
        100.64.2.226/31,
        100.64.2.228/31,
        100.64.2.230/31,
        100.64.2.232/31,
	100.64.0.186/31,
	100.64.0.188/31
    ];
}

# filters

#ffrl 

# BGP Import Filter für Rheinland
filter ebgp_ffrl_import_filter {
    if is_default() then accept;
    reject;
}

# BGP Export Filter für Rheinland
filter ebgp_ffrl_export_filter {
    if is_ffrl_nat() then accept;
    reject;
}


#icvpn 

filter ebgp_icvpn_import_filter {
    if is_mwu_self_nets() then reject;
    if is_chaosvpn() then accept;
    if roa_check(roa_icvpn) = ROA_VALID then {
        if is_freifunk() then accept;
        if is_dn42() then accept;
    } else {
        if roa_check(roa_icvpn) = ROA_UNKNOWN then {
            if is_dn42() then { 
#                print "ROA UNKNOWN for dn42 net, accepting: ", net, " ASN: ", bgp_path.last;
                accept;
            }
            if is_freifunk() then {
#                print "ROA UNKNOWN for freifunk net, accepting: ", net, " ASN: ", bgp_path.last;
                accept;
            }
        }
        if roa_check(roa_icvpn) = ROA_INVALID then {
            if is_freifunk() then {
#                print "ROA INVALID for freifunk net, accepting: ", net, " ASN: ", bgp_path.last;
                accept;
            }
        }
        reject;
    }
    reject;
}

# necessary to inform bird about devices
protocol device {
    scan time 30;
};

# learn about directly connected community subnets
protocol direct mwu_subnets {
    interface "mzBR";
    interface "wiBR";
    import where is_mwu_self_nets();
};

protocol kernel kernel_mwu {
    scan time 30;
    import none;
    export filter {
        if is_mwu_self_nets() then
            reject;
        krt_prefsrc = mwu_addr_ic;
        accept;
    };
    kernel table ipt_icvpn;
};


# IP-NAT-Adresse legen wir in die interne BIRD Routing Table
protocol static ffrl_uplink_hostroute {
    table ffrl;
    route 185.66.195.32/32 reject;
}

# Wir legen die Transfernetze in die interne BIRD Routing Table
protocol direct {
    table ffrl;
    interface "ffrl-*";
    import where is_ffrl_tunnel_nets();
}

# Wir exportieren über Rheinland gelernte Routen in die Kernel Table 61 (ffinetexit)
protocol kernel kernel_ffrl {
    scan time 30;
    import none;
    export filter {
        krt_prefsrc = ffrl_nat_address;
        accept;
    };
    table ffrl;
    kernel table ipt_ffinetexit;
};

# BGP Template für Rheinland Peerings
template bgp ffrl_uplink {
    table ffrl;
    local as mwu_as;
    import keep filtered;
    import filter ebgp_ffrl_import_filter;
    export filter ebgp_ffrl_export_filter;
    next hop self;
    direct;
};


# templates for iBGP
template bgp bgp_ibgp_mwu {
    local mz_addr_mz as mwu_as;
    import keep filtered on;
    import all;  # EXPERIMENT !!!!!
    export where source = RTS_BGP;
    direct;
    gateway direct;
};

# templates for eBGP
template bgp ebgp_ic {
    local mwu_addr_ic as mwu_as;
    import keep filtered on;
    import filter ebgp_icvpn_import_filter;
    export filter {
        if is_mwu_self_nets() then {  # own nets
            accept;
        }
        if source = RTS_BGP then {
            if is_freifunk() || is_dn42() then {
                accept;
            }
        }
        reject;
    };
    direct;
};

# P E E R I N G S
# iBGP

protocol bgp mwu_lotuswurzel from bgp_ibgp_mwu { # lotuswurzel
    neighbor 10.37.0.23 as mwu_as;
};

protocol bgp mwu_ingwer from bgp_ibgp_mwu { # ingwer
    neighbor 10.37.0.161 as mwu_as;
};

protocol bgp mwu_wasserfloh from bgp_ibgp_mwu { # wasserfloh
    neighbor 10.37.0.231 as mwu_as;
};

protocol bgp mwu_zwiebel from bgp_ibgp_mwu { # zwiebel
    neighbor 10.37.1.0 as mwu_as;
};

protocol bgp mwu_glueckskeks from bgp_ibgp_mwu { # glueckskeks
    neighbor 10.37.1.1 as mwu_as;
};

protocol bgp mwu_zuckerwatte from bgp_ibgp_mwu { # zuckerwatte
    neighbor 10.37.1.2 as mwu_as;
};

protocol bgp mwu_aubergine from bgp_ibgp_mwu { # aubergine
    neighbor 10.37.1.3 as mwu_as;
};

protocol bgp mwu_suesskartoffel from bgp_ibgp_mwu { # suesskartoffel
    neighbor 10.37.1.4 as mwu_as;
};

protocol bgp mwu_uffschnitt from bgp_ibgp_mwu { # uffschnitt
    neighbor 10.37.0.101 as mwu_as;
};

# P E E R I N G S
# eBGP (siehe IPv6)

# FFRL Berlin bb-a.ak.ber
protocol bgp ffrl_ber1 from ffrl_uplink {
    source address 100.64.2.227;
    neighbor 100.64.2.226 as 201701;
};

# FFRL Berlin bb-b.ak.ber
protocol bgp ffrl_ber2 from ffrl_uplink {
    source address 100.64.2.229;
    neighbor 100.64.2.228 as 201701;
};

# FFRL Duesseldorf bb-ba.ix.dus
protocol bgp ffrl_dus1 from ffrl_uplink {
    source address 100.64.2.231;
    neighbor 100.64.2.230 as 201701;
    default bgp_local_pref 200;
};

# FFRL Duesseldorf bb-b.ix.dus
protocol bgp ffrl_dus2 from ffrl_uplink {
    source address 100.64.2.233;
    neighbor 100.64.2.232 as 201701;
};

# FFRL Frankfurt bb-a.fra3 
protocol bgp ffrl_fra1 from ffrl_uplink {
    source address 100.64.0.187;
    neighbor 100.64.0.186 as ffrl_as;
    default bgp_local_pref 200;
};

# FFRL Frankfurt bb-b.fra3
protocol bgp ffrl_fra2 from ffrl_uplink {
    source address 100.64.0.189;
    neighbor 100.64.0.188 as ffrl_as;
};

# P E E R I N G S
# eBGP ICVPN
include "ebgp_peers_v4.inc";
