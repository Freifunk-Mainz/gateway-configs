timeformat protocol iso long;

define mz_addr_ic = 10.207.0.37;  # wasserfloh = mainz1
define wi_addr_wi = 10.56.0.231;
define mz_addr_mz = 10.37.0.231;

router id 10.207.0.37;

#table icvpn; # BGP Peerings ICVPN and local wimz nets

# ROA
roa table roa_icvpn {
  include "ebgp_roa_v4.inc";
}

# functions
function is_default() {
    return net ~ [
        0.0.0.0/0
    ];
}

function is_freifunk() {
    return net ~ [
        10.0.0.0/8{16,24}
    ];
}

function is_dn42() {
    return net ~ [
        172.22.0.0/15{20,28}
    ];
}

function is_chaosvpn() {
    return net ~ [
        172.31.0.0/16+
    ];
}

function is_mwu_self_nets() {
    return net ~ [
        10.56.0.0/16+,
        10.37.0.0/16+
    ];
}

function is_wi_self_net() {
    return net ~ [
        10.56.0.0/16+
    ];
}

function is_mz_self_net() {
    return net ~ [
        10.37.0.0/16+
    ];
}

# filters
filter ebgp_icvpn_import_filter {
    if is_mwu_self_nets() then reject;
    if is_chaosvpn() then accept;
    if roa_check(roa_icvpn) = ROA_VALID then {
        if is_freifunk() then accept;
        if is_dn42() then accept;
    } else {
        if roa_check(roa_icvpn) = ROA_UNKNOWN then {
            if is_dn42() then {
                print "ROA UNKNOWN for dn42 net, accepting: ", net, " ASN: ", bgp_path.last;
                accept;
            }
            if is_freifunk() then {
                print "ROA UNKNOWN for freifunk net, accepting: ", net, " ASN: ", bgp_path.last;
                accept;
            }
        }
        if roa_check(roa_icvpn) = ROA_INVALID then {
            if is_freifunk() then {
                print "ROA INVALID for freifunk net, accepting: ", net, " ASN: ", bgp_path.last;
                accept;
            }
        }
        reject;
    }
    reject;
}

# protocols
# necessary to inform bird about devices
protocol device {
    scan time 30;
};

# learn about directly connected community subnets
protocol direct mwu_subnets {
#    table icvpn;
    interface "mzBR";
    interface "wiBR";
    import where is_mwu_self_nets();
};

protocol kernel kernel_mwu {
    scan time 30;
    import none;
    export filter {
        if is_mwu_self_nets() then
            reject;
        krt_prefsrc = wi_addr_wi;
        accept;
    };
#    table icvpn;
    kernel table 23;
};

# templates for iBGP
template bgp bgp_ibgp_mz {
    local mz_addr_mz as 65037;
#    table icvpn;
    import all;  # EXPERIMENT !!!!!
    export where source = RTS_BGP;
    direct;
    gateway direct;
};

# templates for eBGP
template bgp ebgp_ic {
    local mz_addr_ic as 65037;
#    table icvpn;
    import keep filtered on;
    import filter ebgp_icvpn_import_filter;
    export filter {
        if is_mz_self_net() then {  # own nets
#            bgp_path.prepend(65037);
            accept;
        }
        if is_wi_self_net() then {  # foreign mz nets
            bgp_path.delete(65037);
            bgp_path.prepend(65036);
            bgp_path.prepend(65037);
            accept;
        }
        if source = RTS_BGP then {
            if is_freifunk() || is_dn42() then {
                accept;
            }
        }
        reject;
    };
    direct;
};

# P E E R I N G S
# iBGP

protocol bgp mwu_mainz2 from bgp_ibgp_mz { # spinat
    neighbor 10.37.0.7 as 65037;
};

protocol bgp mwu_aubergine from bgp_ibgp_mz { # aubergine
    neighbor 10.37.1.3 as 65037;
};

protocol bgp mwu_zwiebel from bgp_ibgp_mz { # zwiebel
    neighbor 10.37.1.0 as 65037;
};

protocol bgp mwu_glueckskeks from bgp_ibgp_mz { # glueckskeks
    neighbor 10.37.1.1 as 65037;
};

protocol bgp mwu_parmesan from bgp_ibgp_mz { # parmesan
    neighbor 10.37.0.42 as 65037;
};

# P E E R I N G S
# eBGP (siehe IPv6)

# following the pattern, a load of 'em:
# protocol bgp <PeerName> from ebgp_ic {
#    neighbor <PeerAddrV4> as <PeerAS>;
#};
include "ebgp_peers_v4.inc";
