timeformat protocol iso long;

define mwu_addr_ic = 10.207.37.231;  # wasserfloh = mwu231
define mz_addr_mz = 10.37.0.231;
define ffrl_nat_address         = 185.66.195.33; # public ffrl address for nat

# AS
define mwu_as = 65037; # private AS of mwu
define ffrl_as = 201701; # public AS of rheinland

router id 10.207.37.231;

#table icvpn; # BGP Peerings ICVPN
table ffrl; # BGP Peerings FFRL

# ROA
roa table roa_icvpn {
  include "ebgp_roa_v4.inc";
}

# functions
function is_default() {
    return net ~ [
        0.0.0.0/0
    ];
}

function is_ffrl_nat() {
    return net ~ [
        185.66.195.33/32
    ];
}

function is_ffrl_tunnel_nets() {
    return net ~ [
        100.64.2.218/31,
        100.64.2.220/31,
        100.64.2.222/31,
        100.64.2.224/31
    ];
}

function is_freifunk() {
    return net ~ [
        10.0.0.0/8{16,24}
    ];
}

function is_dn42() {
    return net ~ [
        172.20.0.0/14{20,28}
    ];
}

function is_chaosvpn() {
    return net ~ [
        172.31.0.0/16+
    ];
}

function is_mwu_self_nets() {
    return net ~ [
        10.56.0.0/16+,
        10.37.0.0/16+
    ];
}

function is_wi_self_net() {
    return net ~ [
        10.56.0.0/16+
    ];
}

function is_mz_self_net() {
    return net ~ [
        10.37.0.0/16+
    ];
}

# filters
filter ebgp_icvpn_import_filter {
    if is_mwu_self_nets() then reject;
    if is_chaosvpn() then accept;
    if roa_check(roa_icvpn) = ROA_VALID then {
        if is_freifunk() then accept;
        if is_dn42() then accept;
    } else {
        if roa_check(roa_icvpn) = ROA_UNKNOWN then {
            if is_dn42() then {
#                print "ROA UNKNOWN for dn42 net, accepting: ", net, " ASN: ", bgp_path.last;
                accept;
            }
            if is_freifunk() then {
#                print "ROA UNKNOWN for freifunk net, accepting: ", net, " ASN: ", bgp_path.last;
                accept;
            }
        }
        if roa_check(roa_icvpn) = ROA_INVALID then {
            if is_freifunk() then {
#                print "ROA INVALID for freifunk net, accepting: ", net, " ASN: ", bgp_path.last;
                accept;
            }
        }
        reject;
    }
    reject;
}

filter ebgp_ffrl_import_filter {
    if is_default() then accept;
    reject;
}

filter ebgp_ffrl_export_filter {
    if is_ffrl_nat() then accept;
    reject;
}

# protocols
# necessary to inform bird about devices
protocol device {
    scan time 30;
};

# learn about directly connected community subnets
protocol direct mwu_subnets {
    interface "mzBR";
    interface "wiBR";
    import where is_mwu_self_nets();
};

protocol static ffrl_uplink_hostroute {
    table ffrl;
    route 185.66.195.33/32 reject;
}

protocol direct ffrl_tunnels {
    table ffrl;
    interface "ffrl-*";
    import where is_ffrl_tunnel_nets();
}

protocol kernel kernel_mwu {
    scan time 30;
    import none;
    export filter {
        if is_mwu_self_nets() then
            reject;
        krt_prefsrc = mwu_addr_ic;
        accept;
    };
    kernel table ipt_icvpn;
};

protocol kernel kernel_ffrl {
    scan time 30;
    import none;
    export filter {
        krt_prefsrc = ffrl_nat_address;
        accept;
    };
    table ffrl;
    kernel table ipt_ffinetexit;
};

# templates for iBGP
template bgp bgp_ibgp_mwu {
    local mz_addr_mz as mwu_as;
    import all;  # EXPERIMENT !!!!!
    export where source = RTS_BGP;
    direct;
    gateway direct;
};

# templates for eBGP
template bgp ebgp_ic {
    local mwu_addr_ic as mwu_as;
    import keep filtered on;
    import filter ebgp_icvpn_import_filter;
    export filter {
        if is_mwu_self_nets() then {  # own nets
            accept;
        }
        if source = RTS_BGP then {
            if is_freifunk() || is_dn42() then {
                accept;
            }
        }
        reject;
    };
    direct;
};

template bgp ffrl_uplink {
    table ffrl;
    local as mwu_as;
    import keep filtered;
    import filter ebgp_ffrl_import_filter;
    export filter ebgp_ffrl_export_filter;
    next hop self;
    direct;
};


# P E E R I N G S
# iBGP

protocol bgp mwu_spinat from bgp_ibgp_mwu { # spinat
    neighbor 10.37.0.7 as mwu_as;
};

protocol bgp mwu_ingwer from bgp_ibgp_mwu { # ingwer
    neighbor 10.37.0.161 as mwu_as;
};

protocol bgp mwu_lotuswurzel from bgp_ibgp_mwu { # lotuswurzel
    neighbor 10.37.0.23 as mwu_as;
};

protocol bgp mwu_aubergine from bgp_ibgp_mwu { # aubergine
    neighbor 10.37.1.3 as mwu_as;
};

protocol bgp mwu_zwiebel from bgp_ibgp_mwu { # zwiebel
    neighbor 10.37.1.0 as mwu_as;
};

protocol bgp mwu_glueckskeks from bgp_ibgp_mwu { # glueckskeks
    neighbor 10.37.1.1 as mwu_as;
};

protocol bgp mwu_zuckerwatte from bgp_ibgp_mwu { # zuckerwatte
    neighbor 10.37.1.2 as mwu_as;
};

protocol bgp mwu_suesskartoffel from bgp_ibgp_mwu { # suesskartoffel
    neighbor 10.37.1.4 as mwu_as;
};

# P E E R I N G S
# eBGP (siehe IPv6)

# FFRL Berlin bb-a.ak.ber
protocol bgp ffrl_ber1 from ffrl_uplink {
    source address 100.64.2.219;
    neighbor 100.64.2.218 as 201701;
};

# FFRL Berlin bb-b.ak.ber
protocol bgp ffrl_ber2 from ffrl_uplink {
    source address 100.64.2.221;
    neighbor 100.64.2.220 as 201701;
};

# FFRL Duesseldorf bb-ba.ix.dus
protocol bgp ffrl_dus1 from ffrl_uplink {
    source address 100.64.2.223;
    neighbor 100.64.2.222 as 201701;
};

# FFRL Duesseldorf bb-b.ix.dus
protocol bgp ffrl_dus2 from ffrl_uplink {
    source address 100.64.2.225;
    neighbor 100.64.2.224 as 201701;
    default bgp_local_pref 200;
};

# following the pattern, a load of 'em:
# protocol bgp <PeerName> from ebgp_ic {
#    neighbor <PeerAddrV4> as <PeerAS>;
#};
include "ebgp_peers_v4.inc";
