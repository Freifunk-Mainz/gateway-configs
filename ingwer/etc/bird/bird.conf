timeformat protocol iso long;

# local addresses
define mz_addr_ic		= 10.207.37.161;  # ingwer = mwu161
define wi_addr_wi		= 10.56.0.161; # wi-mesh-ip
define mz_addr_mz		= 10.37.0.161; # mz-mesh-ip
define ffrl_nat_address		= 185.66.195.38; # public ffrl address for nat

# AS
define mz_as = 65037; # privat AS of mainz
define wi_as = 65036; # privat AS of wiesbaden
define ffrl_as = 201701; # public AS of rheinland

router id mz_addr_ic;

#table icvpn;		# BGP Peerings ICVPN
table ffrl;		# BGP Peerings FFRL

# ROA
roa table roa_icvpn {
    include "ebgp_roa_v4.inc";
}

# functions
function is_default() {
    return net ~ [
        0.0.0.0/0
    ];
}

function is_ffrl_nat() {
    return net ~ [
        185.66.195.38/32
    ];
}

function is_ffrl_tunnel_nets() {
    return net ~ [
        100.64.2.234/31,
        100.64.2.236/31,
        100.64.2.238/31,
        100.64.2.240/31,
        100.64.1.112/31,
        100.64.1.114/31
    ];
}

function is_freifunk() {
    return net ~ [
        10.0.0.0/8{16,24}
    ];
}

function is_dn42() {
    return net ~ [
        172.20.0.0/14{20,28}
    ];
}

function is_chaosvpn() {
    return net ~ [
        172.31.0.0/16+
    ];
}

function is_mwu_self_nets() {
    return net ~ [
        10.56.0.0/16+,
        10.37.0.0/16+
    ];
}

function is_wi_self_net() {
    return net ~ [
        10.56.0.0/16+
    ];
}

function is_mz_self_net() {
    return net ~ [
        10.37.0.0/16+
    ];
}

# filters
filter ebgp_icvpn_import_filter {
    if is_mwu_self_nets() then reject;
    if is_chaosvpn() then accept;
    if roa_check(roa_icvpn) = ROA_VALID then {
        if is_freifunk() then accept;
        if is_dn42() then accept;
    } else {
        if roa_check(roa_icvpn) = ROA_UNKNOWN then {
            if is_dn42() then {
#                print "ROA UNKNOWN for dn42 net, accepting: ", net, " ASN: ", bgp_path.last;
                accept;
            }
            if is_freifunk() then {
#                print "ROA UNKNOWN for freifunk net, accepting: ", net, " ASN: ", bgp_path.last;
                accept;
            }
        }
        if roa_check(roa_icvpn) = ROA_INVALID then {
            if is_freifunk() then {
#                print "ROA INVALID for freifunk net, accept: ", net, " ASN: ", bgp_path.last;
                accept;
            }
        }
        reject;
    }
    reject;
}

filter ebgp_ffrl_import_filter {
    if is_default() then accept;
    reject;
}

filter ebgp_ffrl_export_filter {
    if is_ffrl_nat() then accept;
    reject;
}

# protocols
# necessary to inform bird about devices
protocol device {
    scan time 30;
};

# learn about directly connected community subnets
protocol direct mwu_subnets {
#    table icvpn;
    interface "mzBR";
    interface "wiBR";
    import where is_mwu_self_nets();
};

protocol static ffrl_uplink_hostroute {
    table ffrl;
    route 185.66.195.38/32 reject;
}

protocol direct ffrl_tunnels {
    table ffrl;
    interface "ffrl-*";
    import where is_ffrl_tunnel_nets();
}

protocol kernel kernel_mwu {
    scan time 30;
    import none;
    export filter {
        if is_mwu_self_nets() then
            reject;
        krt_prefsrc = mz_addr_ic;
        accept;
    };
#    table icvpn;
    kernel table ipt_icvpn;
};

protocol kernel kernel_ffrl {
    scan time 30;
    import none;
    export filter {
        krt_prefsrc = ffrl_nat_address;
        accept;
    };
    table ffrl;
    kernel table ipt_ffinetexit;
};

# Templates
# templates for iBGP
template bgp ibgp_mz {
    local mz_addr_mz as mz_as;
#    table icvpn;
    import keep filtered on;
    import all;  # EXPERIMENT !!!!!
    export where source = RTS_BGP;
    direct;
    gateway direct;
};

# template for iBGP - export mz subnet 4 mz bb-gate
template bgp bgp_ibgp_bbgate_mz {
    local mz_addr_mz as mz_as;
    import none;
    export filter {
        if source = RTS_BGP then {
            if is_mwu_self_nets() then reject;
            accept;
        }
        if is_mz_self_net() then accept;
        reject;
    };
    direct;
    gateway direct;
};

# templates for eBGP
template bgp ebgp_ic {
    local mz_addr_ic as mz_as;
#    table icvpn;
    import keep filtered on;
    import filter ebgp_icvpn_import_filter;
    export filter {
        if is_mz_self_net() then {  # own nets
#            bgp_path.prepend(mz_as);
            accept;
        }
        if is_wi_self_net() then {  # foreign wi nets
            bgp_path.delete(mz_as);
            bgp_path.prepend(wi_as);
            bgp_path.prepend(mz_as);
            accept;
        }
        if source = RTS_BGP then {
            if is_freifunk() || is_dn42() then {
                accept;
            }
        }
        reject;
    };
    direct;
};

template bgp ffrl_uplink {
    table ffrl;
    local as mz_as;
    import keep filtered;
    import filter ebgp_ffrl_import_filter;
    export filter ebgp_ffrl_export_filter;
    next hop self;
    direct;
};


# P E E R I N G S
# iBGP 

protocol bgp mwu_gate7 from ibgp_mz { # spinat
    neighbor 10.37.0.7 as mz_as;
};

protocol bgp mwu_gate231 from ibgp_mz { # wasserfloh
    neighbor 10.37.0.231 as mz_as;
};

protocol bgp mwu_aubergine from ibgp_mz { # aubergine
    neighbor 10.37.1.3 as mz_as;
};

protocol bgp mwu_zwiebel from ibgp_mz { # zwiebel
    neighbor 10.37.1.0 as mz_as;
};

protocol bgp mwu_glueckskeks from ibgp_mz { # glueckskeks
    neighbor 10.37.1.1 as mz_as;
};

protocol bgp mwu_zuckerwatte from ibgp_mz { # zuckerwatte
    neighbor 10.37.1.2 as mz_as;
};

protocol bgp mwu_suesskartoffel from ibgp_mz { # suesskartoffel
    neighbor 10.37.1.4 as mz_as;
};

# P E E R I N G S
# eBGP (siehe IPv6)

# FFRL Berlin bb-a.ak.ber
protocol bgp ffrl_ber1 from ffrl_uplink {
    source address 100.64.2.235;
    neighbor 100.64.2.234 as ffrl_as;
};

# FFRL Berlin bb-b.ak.ber
protocol bgp ffrl_ber2 from ffrl_uplink {
    source address 100.64.2.237;
    neighbor 100.64.2.236 as ffrl_as;
};

# FFRL Duesseldorf bb-ba.ix.dus 
protocol bgp ffrl_dus1 from ffrl_uplink {
    source address 100.64.2.239;
    neighbor 100.64.2.238 as ffrl_as;
};

# FFRL Duesseldorf bb-b.ix.dus 
protocol bgp ffrl_dus2 from ffrl_uplink {
    source address 100.64.2.241;
    neighbor 100.64.2.240 as ffrl_as;
};

# FFRL Frankfurt bb-a.fra2
protocol bgp ffrl_fra1 from ffrl_uplink {
    source address 100.64.1.113;
    neighbor 100.64.1.112 as ffrl_as;
    default bgp_local_pref 200;
};

# FFRL Frankfurt bb-b.fra2
protocol bgp ffrl_fra2 from ffrl_uplink {
    source address 100.64.1.115;
    neighbor 100.64.1.114 as ffrl_as;
};

# following the pattern, a load of 'em:
# protocol bgp <PeerName> from ebgp_ic {
#    neighbor <PeerAddrV4> as <PeerAS>;
#};

include "ebgp_peers_v4.inc";
