timeformat protocol iso long;

define wi_addr_ic     = fec0::a:cf:1:38;        # kaschu = wiesbaden2
define wi_addr_wi     = fd56:b4dc:4b1e::a38:d0; # wi-mesh-ip
define mz_addr_mz     = fd37:b4dc:4b1e::a25:d0; # mz-mesh-ip
# prefixes repeated in functions -> see there
define wi_prefix      = fd56:b4dc:4b1e::/48;
define mz_prefix      = fd37:b4dc:4b1e::/48;

# AS
define mz_as = 65037; # as of mainz
define wi_as = 65036; # as of wiesbaden

router id 10.207.1.56;   # traditionally v4-addr as router id

# routing tables
#table icvpn;     # BGP Peerings ICVPN

# ROA
roa table roa_icvpn {
  include "ebgp_roa_v6.inc";
}

#functions
function is_default() {
    return net ~ [
        ::/0
    ];
}

function is_ula() {
    return net ~ [
        fc00::/7{48,64}
    ];
}

function is_mwu_self_nets() {
    return net ~ [
        fd56:b4dc:4b1e::/48+,
        fd37:b4dc:4b1e::/48+
    ];
}

function is_wi_self_net() {
    return net ~ [
        fd56:b4dc:4b1e::/48+
    ];
}

function is_mz_self_net() {
    return net ~ [
        fd37:b4dc:4b1e::/48+
    ];
}

filter ebgp_icvpn_import_filter {
    if is_mwu_self_nets() then reject;
    if roa_check(roa_icvpn) = ROA_VALID then {
        if is_ula() then accept;
    } else {
        if is_ula() then {
            if roa_check(roa_icvpn) = ROA_UNKNOWN then {
                print "ROA UNKNOWN for net, accepting: ", net, " ASN: ", bgp_path.last;
                accept;
            }
            if roa_check(roa_icvpn) = ROA_INVALID then {
                print "ROA INVALID for net, accepting: ", net, " ASN: ", bgp_path.last;
                accept;
            }
        } else {
            print "Non ULA net, rejecting: ", net, " ASN: ", bgp_path.last;
            reject;
        }
        reject;
    }
    reject;
}

# protocols
# necessary to inform bird about devices
protocol device {
    scan time 30;
};
# learn about directly connected community subnets
protocol direct mwu_subnets {
#    table icvpn;
    interface "mzBR";
    interface "wiBR";
    import where is_mwu_self_nets();
};

protocol kernel kernel_mwu {
    scan time 30;
    import none;
    export filter {
        if is_mwu_self_nets() then
            reject;
        krt_prefsrc = wi_addr_wi;
        accept;
    };
#    table icvpn;
    kernel table 23;
};

# template for iBGP
template bgp ibgp_wi {
    local wi_addr_wi as wi_as;
#    table icvpn;
    import all;  # EXPERIMENT !!!!!
    export where source = RTS_BGP;
    direct;
    gateway direct;
};

# template for eBGP
template bgp ebgp_ic {
    local wi_addr_ic as wi_as;
#    table icvpn;
    import filter ebgp_icvpn_import_filter;
    export filter {
        if is_wi_self_net() then {  # own nets
#            bgp_path.prepend(65036);
            accept;
        }
        if is_mz_self_net() then {  # foreign mz nets
            bgp_path.delete(65036);
            bgp_path.prepend(65037);
            bgp_path.prepend(65036);
            accept;
        }
        if source = RTS_BGP then {
            accept;
        }
        reject;
    };
    direct;
};

# interne BIRD Routing-Tabelle
table ffrl;

# Funktionen, die später aufgerufen werden
function is_1_default() {
    return net ~ [
        ::/0
    ];
}

function is_ffrl_public_nets() {
    return net ~ [
        2a03:2260:11a::/48,
        2a03:2260:11b::/48
    ];
}

function is_ffrl_tunnel_nets() {
    return net ~ [
        2a03:2260:0:13b::/64,
        2a03:2260:0:13c::/64,
        2a03:2260:0:13d::/64,
        2a03:2260:0:13e::/64,
        2a03:2260:0:13f::/64,
        2a03:2260:0:140::/64        
    ];
}

# BGP Import Filter für Rheinland
filter ebgp_ffrl_import_filter {
    if is_1_default() then accept;
    reject;
}

# BGP Export Filter für Rheinland
filter ebgp_ffrl_export_filter {
    if is_ffrl_public_nets() then accept;
    reject;
}

# Wir legen die Transfernetze in die interne BIRD Routing Table
protocol direct {
    table ffrl;
    interface "ffrl-*";
    import where is_ffrl_tunnel_nets();
}

# Wir legen unsere Public v6-Netze in die interne BIRD Routing Table
protocol static ffrl_public_routes {
    table ffrl;
    route 2a03:2260:11a::/48 reject;
    route 2a03:2260:11b::/48 reject;
}

# Wir exportieren über Rheinland gelernte Routen in die Kernel Table 61 (ffinetexit)
protocol kernel kernel_ffrl {
    scan time 30;
    import none;
    export filter {
        if is_default() then accept;
        reject;
    };
    table ffrl;
    kernel table 61;
}

# BGP Template für Rheinland Peerings
template bgp ffrl_uplink {
    table ffrl;
    local as 65037;
    import keep filtered;
    import filter ebgp_ffrl_import_filter;
    export filter ebgp_ffrl_export_filter;
    next hop self;
    direct;
};

# P E E R I N G S

# FFRL Berlin bb-a.ak.ber
protocol bgp ffrl_ber1 from ffrl_uplink {
    source address 2a03:2260:0:13b::2;
    neighbor 2a03:2260:0:13b::1 as 201701;
}

# FFRL Berlin bb-b.ak.ber
protocol bgp ffrl_ber2 from ffrl_uplink {
    source address 2a03:2260:0:13c::2;
    neighbor 2a03:2260:0:13c::1 as 201701;
    default bgp_local_pref 200;
}

# FFRL Duesseldorf bb-a.ix.dus
protocol bgp ffrl_dus1 from ffrl_uplink {
    source address 2a03:2260:0:13d::2;
    neighbor 2a03:2260:0:13d::1 as 201701;
}

# FFRL Duesseldorf bb-b.ix.dus
protocol bgp ffrl_dus2 from ffrl_uplink {
    source address 2a03:2260:0:13e::2;
    neighbor 2a03:2260:0:13e::1 as 201701;
}

# FFRL Frankfurt bb-a.fra3.fra
protocol bgp ffrl_fra1 from ffrl_uplink {
    source address 2a03:2260:0:13f::2;
    neighbor 2a03:2260:0:13f::1 as 201701;
}

# FFRL Frankfurt bb-b.fra3.fra
protocol bgp ffrl_fra2 from ffrl_uplink {
    source address 2a03:2260:0:140::2;
    neighbor 2a03:2260:0:140::1 as 201701;
}



# P E E R I N G S
# #### iBGP #####

protocol bgp mwu_wiesbaden1 from ibgp_wi { # lotuswurzel
    neighbor fd56:b4dc:4b1e::a38:17 as 65036;
};

protocol bgp mwu_aubergine from ibgp_wi { # aubergine
    neighbor fd56:b4dc:4b1e::a38:103 as 65036;
};

protocol bgp mwu_zwiebel from ibgp_wi { # zwiebel
    neighbor fd56:b4dc:4b1e::a38:100 as 65036;
};

protocol bgp mwu_glueckskeks from ibgp_wi { # glueckskeks
    neighbor fd56:b4dc:4b1e::a38:101 as 65036;
};

# P E E R I N G S
# #### eBGP #####

# following the pattern, a load of 'em:
# protocol bgp <PeerName> from ebgp_ic {
#    neighbor <PeerAddrV6> as <PeerAS>;
#};
include "ebgp_peers_v6.inc";
